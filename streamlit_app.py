import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# --- 1. Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard da Felicidade Mundial",
    page_icon="üåç",
    layout="wide",
)

# --- 2. Fun√ß√µes de Carregamento e Processamento de Dados ---
# O cache do Streamlit acelera a aplica√ß√£o, pois os dados n√£o s√£o recarregados a cada intera√ß√£o.
@st.cache_data
def carregar_dados_consolidados():
    """
    Carrega e consolida os dados de felicidade de 2015 a 2019,
    padronizando as colunas essenciais como 'Country', 'Score' e 'Rank'.
    """
    anos = [2015, 2016, 2017, 2018, 2019]
    df_list = []
    for ano in anos:
        df = pd.read_csv(f"{ano}.csv", encoding='utf-8')
        rename_map = {
            'Country or region': 'Country', 'Country name': 'Country',
            'Happiness Score': 'Score', 'Happiness.Score': 'Score', 'Life Ladder': 'Score',
            'Happiness Rank': 'Rank', 'Overall rank': 'Rank', 'Happiness.Rank': 'Rank'
        }
        cols_to_rename = {k: v for k, v in rename_map.items() if k in df.columns}
        df = df.rename(columns=cols_to_rename)
        df['Year'] = ano
        if 'Rank' not in df.columns:
            df['Rank'] = df['Score'].rank(ascending=False).astype(int)
        df_list.append(df)
    df_total = pd.concat(df_list, ignore_index=True)
    return df_total

@st.cache_data
def carregar_dados_detalhados():
    """
    Carrega e padroniza os dados detalhados com todos os fatores de felicidade
    (PIB, Suporte Social, etc.) para as an√°lises de correla√ß√£o.
    """
    anos = [2015, 2016, 2017, 2018, 2019]
    dfs = []
    for ano in anos:
        df = pd.read_csv(f"{ano}.csv")
        col_renomeadas = {
            'Country or region': 'Country', 'Country name': 'Country',
            'Happiness.Score': 'Score', 'Happiness Score': 'Score',
            'Economy (GDP per Capita)': 'GDP', 'Economy..GDP.per.Capita.': 'GDP', 'GDP per capita': 'GDP',
            'Health (Life Expectancy)': 'Life expectancy', 'Health..Life.Expectancy.': 'Life expectancy', 'Healthy life expectancy': 'Life expectancy',
            'Freedom': 'Freedom', 'Freedom to make life choices': 'Freedom',
            'Trust (Government Corruption)': 'Corruption', 'Trust..Government.Corruption.': 'Corruption', 'Perceptions of corruption': 'Corruption',
            'Family': 'Social support', 'Social support': 'Social support',
            'Generosity': 'Generosity'
        }
        df = df.rename(columns=col_renomeadas)
        colunas_necessarias = ['Country', 'Score', 'GDP', 'Social support', 'Life expectancy', 'Freedom', 'Generosity', 'Corruption']
        df = df[[col for col in colunas_necessarias if col in df.columns]]
        df['Year'] = ano
        dfs.append(df)
    df_completo = pd.concat(dfs, ignore_index=True).dropna()
    return df_completo

# Carrega os dados uma vez
df_total = carregar_dados_consolidados()
df_detailed = carregar_dados_detalhados()
paises_disponiveis = sorted(df_total['Country'].unique())

# --- 3. Layout do Dashboard (T√≠tulo e Sidebar) ---
st.title("üåç Dashboard Interativo do Relat√≥rio Mundial da Felicidade")
st.markdown("An√°lise dos dados de 2015 a 2019 com base no seu notebook `Projeto_2_.ipynb`.")

st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Selecione a an√°lise que deseja visualizar:",
                        ["Vis√£o Geral e Mapa",
                         "Rankings Globais (Animado)",
                         "An√°lise por Continente (Animado)",
                         "Evolu√ß√£o e Compara√ß√£o entre Pa√≠ses",
                         "An√°lise de Fatores (PIB, Liberdade, etc.)"])
st.sidebar.markdown("---")
st.sidebar.info("Este dashboard foi criado com base no notebook `Projeto_2_.ipynb`.")

# --- 4. Gera√ß√£o dos Gr√°ficos (conte√∫do de cada p√°gina) ---

if page == "Vis√£o Geral e Mapa":
    st.header("Mapa Interativo da Felicidade")
    st.markdown("Selecione um ano para visualizar a distribui√ß√£o da felicidade no mundo.")
    ano_mapa = st.slider("Selecione o Ano:", 2015, 2019, 2019)
    
    df_mapa = df_total[df_total['Year'] == ano_mapa]
    fig_mapa = px.choropleth(
        df_mapa, locations='Country', locationmode='country names',
        color='Score', hover_name='Country', color_continuous_scale=px.colors.sequential.Plasma,
        title=f"N√≠vel de Felicidade por Pa√≠s - {ano_mapa}", labels={'Score': 'Pontua√ß√£o'}
    )
    st.plotly_chart(fig_mapa, use_container_width=True)
    
    # ADICIONADO: Gr√°fico da M√©dia Global
    st.markdown("---")
    st.header("M√©dia Global da Felicidade (2015-2019)")
    media_ano = df_total.groupby('Year')['Score'].mean().reset_index()
    fig_media_global = px.line(
        media_ano, x='Year', y='Score', markers=True,
        title='Evolu√ß√£o da M√©dia Global da Pontua√ß√£o de Felicidade'
    )
    fig_media_global.update_layout(xaxis=dict(tickmode='linear'))
    st.plotly_chart(fig_media_global, use_container_width=True)

elif page == "Rankings Globais (Animado)":
    st.header("Rankings dos Pa√≠ses Mais e Menos Felizes")
    st.markdown("Os gr√°ficos abaixo mostram a evolu√ß√£o anual dos 10 pa√≠ses no topo e na base do ranking.")
    col1, col2 = st.columns(2)
    with col1:
        df_top10 = df_total[df_total['Rank'] <= 10]
        fig_top10 = px.bar(
            df_top10, x='Score', y='Country', color='Country', animation_frame='Year',
            orientation='h', title='Top 10 Pa√≠ses Mais Felizes por Ano', range_x=[df_top10['Score'].min() - 0.5, 8]
        )
        fig_top10.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
        fig_top10.update_layout(yaxis={'categoryorder': 'total ascending'}, showlegend=False)
        st.plotly_chart(fig_top10, use_container_width=True)
    with col2:
        df_bottom10 = df_total.groupby('Year', group_keys=False).apply(lambda x: x.nsmallest(10, 'Score'))
        fig_bottom10 = px.bar(
            df_bottom10, x='Score', y='Country', color='Country', animation_frame='Year',
            orientation='h', title='Top 10 Pa√≠ses Menos Felizes por Ano', range_x=[0, df_bottom10['Score'].max() + 0.5]
        )
        fig_bottom10.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
        fig_bottom10.update_layout(yaxis={'categoryorder': 'total descending'}, showlegend=False)
        st.plotly_chart(fig_bottom10, use_container_width=True)

elif page == "An√°lise por Continente (Animado)":
    st.header("M√©dia do Score de Felicidade por Continente")
    # Mapeamento de pa√≠ses para continentes
    continent_map = { 'Africa': ['Algeria', 'Angola', 'Benin', 'Botswana', 'Burkina Faso', 'Burundi', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo (Brazzaville)', 'Congo (Kinshasa)', 'Ivory Coast', 'Djibouti', 'Egypt', 'Ethiopia', 'Gabon', 'Gambia', 'Ghana', 'Guinea', 'Kenya', 'Lesotho', 'Liberia', 'Libya', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Mauritius', 'Morocco', 'Mozambique', 'Namibia', 'Niger', 'Nigeria', 'Rwanda', 'Senegal', 'Sierra Leone', 'Somalia', 'Somaliland Region', 'Somaliland region', 'South Africa', 'South Sudan', 'Sudan', 'Swaziland', 'Tanzania', 'Togo', 'Tunisia', 'Uganda', 'Zambia', 'Zimbabwe'], 'Asia': ['Afghanistan', 'Armenia', 'Azerbaijan', 'Bahrain', 'Bangladesh', 'Bhutan', 'Cambodia', 'China', 'Hong Kong', 'Hong Kong S.A.R., China', 'India', 'Indonesia', 'Iran', 'Iraq', 'Israel', 'Japan', 'Jordan', 'Kazakhstan', 'Kuwait', 'Kyrgyzstan', 'Laos', 'Lebanon', 'Malaysia', 'Mongolia', 'Myanmar', 'Nepal', 'Oman', 'Pakistan', 'Palestinian Territories', 'Philippines', 'Qatar', 'Saudi Arabia', 'Singapore', 'South Korea', 'Sri Lanka', 'Syria', 'Taiwan', 'Taiwan Province of China', 'Tajikistan', 'Thailand', 'Turkey', 'Turkmenistan', 'United Arab Emirates', 'Uzbekistan', 'Vietnam', 'Yemen'], 'Europe': ['Albania', 'Austria', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Georgia', 'Germany', 'Greece', 'Hungary', 'Iceland', 'Ireland', 'Italy', 'Kosovo', 'Latvia', 'Lithuania', 'Luxembourg', 'Macedonia', 'Malta', 'Moldova', 'Montenegro', 'Netherlands', 'North Cyprus', 'North Macedonia', 'Northern Cyprus', 'Norway', 'Poland', 'Portugal', 'Romania', 'Russia', 'Serbia', 'Slovakia', 'Slovenia', 'Spain', 'Sweden', 'Switzerland', 'Ukraine', 'United Kingdom'], 'Americas': ['Argentina', 'Belize', 'Bolivia', 'Brazil', 'Canada', 'Chile', 'Colombia', 'Costa Rica', 'Dominican Republic', 'Ecuador', 'El Salvador', 'Guatemala', 'Haiti', 'Honduras', 'Jamaica', 'Mexico', 'Nicaragua', 'Panama', 'Paraguay', 'Peru', 'Puerto Rico', 'Suriname', 'Trinidad & Tobago', 'Trinidad and Tobago', 'United States', 'Uruguay', 'Venezuela'], 'Oceania': ['Australia', 'New Zealand']}
    
    # Remapeando o continente 'North America' e 'South America' para 'Americas' para simplificar a visualiza√ß√£o
    country_to_continent = {country: continent for continent, countries in continent_map.items() for country in countries}
    df_total['Continent'] = df_total['Country'].map(country_to_continent)
    
    # Agrupando os dados e calculando a m√©dia
    df_grouped = df_total.groupby(['Year', 'Continent'])['Score'].mean().reset_index()

    # ALTERADO: Filtrando para manter apenas os continentes desejados
    continentes_desejados = ['Oceania', 'Americas', 'Europe', 'Asia', 'Africa']
    df_filtrado_continentes = df_grouped[df_grouped['Continent'].isin(continentes_desejados)]

    fig_continent = px.bar(
        df_filtrado_continentes.sort_values(['Year', 'Score']), x='Score', y='Continent',
        orientation='h', color='Continent', animation_frame='Year',
        title='M√©dia do Score de Felicidade por Continente',
        labels={'Score': 'Score M√©dio', 'Continent': 'Continente'},
        text=df_filtrado_continentes['Score'].round(2)
    )
    fig_continent.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
    st.plotly_chart(fig_continent, use_container_width=True)


elif page == "Evolu√ß√£o e Compara√ß√£o entre Pa√≠ses":
    st.header("Evolu√ß√£o da Felicidade (Gr√°fico de Linha)")
    paises_linha = st.multiselect("Selecione os pa√≠ses para o gr√°fico de linha:", options=paises_disponiveis, default=['Brazil', 'Argentina', 'Portugal', 'Finland'])
    if paises_linha:
        df_filtrado = df_total[df_total['Country'].isin(paises_linha)]
        fig_linha = px.line(df_filtrado, x='Year', y='Score', color='Country', markers=True, title='Evolu√ß√£o da Felicidade por Pa√≠s (2015‚Äì2019)')
        fig_linha.update_layout(xaxis=dict(tickmode='linear'))
        st.plotly_chart(fig_linha, use_container_width=True)

    st.markdown("---")
    st.header("Comparativo de Indicadores (Gr√°fico de Radar)")
    ano_radar = st.slider("Selecione o Ano para o Radar:", 2015, 2019, 2019)
    paises_radar = st.multiselect("Selecione os pa√≠ses para o radar:", options=paises_disponiveis, default=['Brazil', 'Finland'])
    
    if paises_radar:
        indicadores = ['GDP', 'Social support', 'Life expectancy', 'Freedom', 'Generosity', 'Corruption']
        df_radar = df_detailed[(df_detailed['Year'] == ano_radar) & (df_detailed['Country'].isin(paises_radar))]
        
        fig_radar = go.Figure()
        for _, row in df_radar.iterrows():
            fig_radar.add_trace(go.Scatterpolar(
                r=[row.get(ind, 0) for ind in indicadores], theta=indicadores, fill='toself', name=row['Country']
            ))
        fig_radar.update_layout(polar=dict(radialaxis=dict(visible=True, range=[0, 2])), showlegend=True, title=f"Comparativo de Indicadores ({ano_radar})")
        st.plotly_chart(fig_radar, use_container_width=True)

elif page == "An√°lise de Fatores (PIB, Liberdade, etc.)":
    st.header("Rela√ß√£o entre Felicidade, PIB e Liberdade")
    st.markdown("Cada ponto representa um pa√≠s. A cor representa o n√≠vel de liberdade de escolha e o tamanho, a pontua√ß√£o de felicidade.")
    ano_scatter = st.slider("Selecione o Ano para o Gr√°fico de Dispers√£o:", 2015, 2019, 2019)
    
    df_scatter_ano = df_detailed[df_detailed['Year'] == ano_scatter]
    fig_scatter = px.scatter(
        df_scatter_ano, x='GDP', y='Score',
        size='Score', color='Freedom', hover_name='Country', size_max=20,
        title=f'Felicidade vs. PIB per Capita vs. Liberdade ({ano_scatter})',
        labels={'GDP': 'PIB per Capita', 'Score': 'Pontua√ß√£o de Felicidade', 'Freedom': 'Liberdade de Escolha'}
    )
    st.plotly_chart(fig_scatter, use_container_width=True)
